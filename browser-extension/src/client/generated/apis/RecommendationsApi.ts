/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedRecommendationList,
  PatchedRecommendation,
  Recommendation,
} from '../models';
import {
    PaginatedRecommendationListFromJSON,
    PaginatedRecommendationListToJSON,
    PatchedRecommendationFromJSON,
    PatchedRecommendationToJSON,
    RecommendationFromJSON,
    RecommendationToJSON,
} from '../models';

export interface RecommendationsCreateRequest {
    recommendation: Recommendation;
}

export interface RecommendationsDestroyRequest {
    id: number;
}

export interface RecommendationsListRequest {
    page?: number;
}

export interface RecommendationsPartialUpdateRequest {
    id: number;
    patchedRecommendation?: PatchedRecommendation;
}

export interface RecommendationsRetrieveRequest {
    id: number;
}

export interface RecommendationsUpdateRequest {
    id: number;
    recommendation: Recommendation;
}

/**
 * 
 */
export class RecommendationsApi extends runtime.BaseAPI {

    /**
     */
    async recommendationsCreateRaw(requestParameters: RecommendationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recommendation>> {
        if (requestParameters.recommendation === null || requestParameters.recommendation === undefined) {
            throw new runtime.RequiredError('recommendation','Required parameter requestParameters.recommendation was null or undefined when calling recommendationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecommendationToJSON(requestParameters.recommendation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecommendationFromJSON(jsonValue));
    }

    /**
     */
    async recommendationsCreate(requestParameters: RecommendationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recommendation> {
        const response = await this.recommendationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recommendationsDestroyRaw(requestParameters: RecommendationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recommendationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async recommendationsDestroy(requestParameters: RecommendationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.recommendationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async recommendationsListRaw(requestParameters: RecommendationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRecommendationList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRecommendationListFromJSON(jsonValue));
    }

    /**
     */
    async recommendationsList(requestParameters: RecommendationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRecommendationList> {
        const response = await this.recommendationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recommendationsPartialUpdateRaw(requestParameters: RecommendationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recommendation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recommendationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRecommendationToJSON(requestParameters.patchedRecommendation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecommendationFromJSON(jsonValue));
    }

    /**
     */
    async recommendationsPartialUpdate(requestParameters: RecommendationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recommendation> {
        const response = await this.recommendationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recommendationsRetrieveRaw(requestParameters: RecommendationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recommendation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recommendationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecommendationFromJSON(jsonValue));
    }

    /**
     */
    async recommendationsRetrieve(requestParameters: RecommendationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recommendation> {
        const response = await this.recommendationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recommendationsUpdateRaw(requestParameters: RecommendationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Recommendation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling recommendationsUpdate.');
        }

        if (requestParameters.recommendation === null || requestParameters.recommendation === undefined) {
            throw new runtime.RequiredError('recommendation','Required parameter requestParameters.recommendation was null or undefined when calling recommendationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/recommendations/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecommendationToJSON(requestParameters.recommendation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecommendationFromJSON(jsonValue));
    }

    /**
     */
    async recommendationsUpdate(requestParameters: RecommendationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Recommendation> {
        const response = await this.recommendationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
