/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    targetElem?: string;
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    stepId: number;
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    index: number | null;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    mouseButton?: ActionMouseButtonEnum;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    mouseAction?: ActionMouseActionEnum;
}


/**
 * @export
 */
export const ActionMouseButtonEnum = {
    Empty: '',
    L: 'L',
    R: 'R',
    M: 'M'
} as const;
export type ActionMouseButtonEnum = typeof ActionMouseButtonEnum[keyof typeof ActionMouseButtonEnum];

/**
 * @export
 */
export const ActionMouseActionEnum = {
    Empty: '',
    Click: 'CLICK',
    Dbclick: 'DBCLICK'
} as const;
export type ActionMouseActionEnum = typeof ActionMouseActionEnum[keyof typeof ActionMouseActionEnum];


/**
 * Check if a given object implements the Action interface.
 */
export function instanceOfAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "stepId" in value;
    isInstance = isInstance && "index" in value;

    return isInstance;
}

export function ActionFromJSON(json: any): Action {
    return ActionFromJSONTyped(json, false);
}

export function ActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Action {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'description': json['description'],
        'targetElem': !exists(json, 'target_elem') ? undefined : json['target_elem'],
        'stepId': json['step_id'],
        'index': json['index'],
        'mouseButton': !exists(json, 'mouse_button') ? undefined : json['mouse_button'],
        'mouseAction': !exists(json, 'mouse_action') ? undefined : json['mouse_action'],
    };
}

export function ActionToJSON(value?: Action | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'target_elem': value.targetElem,
        'step_id': value.stepId,
        'index': value.index,
        'mouse_button': value.mouseButton,
        'mouse_action': value.mouseAction,
    };
}

