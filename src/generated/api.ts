/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    'target_elem'?: string;
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    'step_id': number;
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    'index': number | null;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    'mouse_button'?: ActionMouseButtonEnum;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    'mouse_action'?: ActionMouseActionEnum;
}

export const ActionMouseButtonEnum = {
    Empty: '',
    L: 'L',
    R: 'R',
    M: 'M'
} as const;

export type ActionMouseButtonEnum = typeof ActionMouseButtonEnum[keyof typeof ActionMouseButtonEnum];
export const ActionMouseActionEnum = {
    Empty: '',
    Click: 'CLICK',
    Dbclick: 'DBCLICK'
} as const;

export type ActionMouseActionEnum = typeof ActionMouseActionEnum[keyof typeof ActionMouseActionEnum];

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ListActions200Response
 */
export interface ListActions200Response {
    /**
     * 
     * @type {number}
     * @memberof ListActions200Response
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListActions200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListActions200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Action>}
     * @memberof ListActions200Response
     */
    'results'?: Array<Action>;
}
/**
 * 
 * @export
 * @interface ListGroups200Response
 */
export interface ListGroups200Response {
    /**
     * 
     * @type {number}
     * @memberof ListGroups200Response
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListGroups200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListGroups200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Group>}
     * @memberof ListGroups200Response
     */
    'results'?: Array<Group>;
}
/**
 * 
 * @export
 * @interface ListSteps200Response
 */
export interface ListSteps200Response {
    /**
     * 
     * @type {number}
     * @memberof ListSteps200Response
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListSteps200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListSteps200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<StepBrief>}
     * @memberof ListSteps200Response
     */
    'results'?: Array<StepBrief>;
}
/**
 * 
 * @export
 * @interface ListTutorials200Response
 */
export interface ListTutorials200Response {
    /**
     * 
     * @type {number}
     * @memberof ListTutorials200Response
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListTutorials200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListTutorials200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TutorialMetadata>}
     * @memberof ListTutorials200Response
     */
    'results'?: Array<TutorialMetadata>;
}
/**
 * 
 * @export
 * @interface ListUsers200Response
 */
export interface ListUsers200Response {
    /**
     * 
     * @type {number}
     * @memberof ListUsers200Response
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListUsers200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListUsers200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof ListUsers200Response
     */
    'results'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Step
 */
export interface Step {
    /**
     * 
     * @type {number}
     * @memberof Step
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Step
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Step
     */
    'index': number;
    /**
     * 
     * @type {Array<StepActionsInner>}
     * @memberof Step
     */
    'actions'?: Array<StepActionsInner>;
    /**
     * 
     * @type {number}
     * @memberof Step
     */
    'tutorial_id': number;
}
/**
 * 
 * @export
 * @interface StepActionsInner
 */
export interface StepActionsInner {
    /**
     * 
     * @type {number}
     * @memberof StepActionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StepActionsInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof StepActionsInner
     */
    'target_elem'?: string;
    /**
     * 
     * @type {number}
     * @memberof StepActionsInner
     */
    'step_id': number;
    /**
     * 
     * @type {number}
     * @memberof StepActionsInner
     */
    'index': number | null;
    /**
     * 
     * @type {string}
     * @memberof StepActionsInner
     */
    'mouse_button'?: StepActionsInnerMouseButtonEnum;
    /**
     * 
     * @type {string}
     * @memberof StepActionsInner
     */
    'mouse_action'?: StepActionsInnerMouseActionEnum;
}

export const StepActionsInnerMouseButtonEnum = {
    Empty: '',
    L: 'L',
    R: 'R',
    M: 'M'
} as const;

export type StepActionsInnerMouseButtonEnum = typeof StepActionsInnerMouseButtonEnum[keyof typeof StepActionsInnerMouseButtonEnum];
export const StepActionsInnerMouseActionEnum = {
    Empty: '',
    Click: 'CLICK',
    Dbclick: 'DBCLICK'
} as const;

export type StepActionsInnerMouseActionEnum = typeof StepActionsInnerMouseActionEnum[keyof typeof StepActionsInnerMouseActionEnum];

/**
 * 
 * @export
 * @interface StepBrief
 */
export interface StepBrief {
    /**
     * 
     * @type {number}
     * @memberof StepBrief
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StepBrief
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof StepBrief
     */
    'index': number;
}
/**
 * 
 * @export
 * @interface Tutorial
 */
export interface Tutorial {
    /**
     * 
     * @type {number}
     * @memberof Tutorial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tutorial
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Tutorial
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tutorial
     */
    'target_site': string;
    /**
     * 
     * @type {Array<StepsInner>}
     * @memberof Tutorial
     */
    'steps'?: Array<StepsInner>;
}
/**
 * 
 * @export
 * @interface TutorialBrief
 */
export interface TutorialBrief {
    /**
     * 
     * @type {number}
     * @memberof TutorialBrief
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TutorialBrief
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TutorialBrief
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TutorialBrief
     */
    'target_site': string;
    /**
     * 
     * @type {Array<TutorialBriefStepsInner>}
     * @memberof TutorialBrief
     */
    'steps'?: Array<TutorialBriefStepsInner>;
}
/**
 * 
 * @export
 * @interface TutorialBriefStepsInner
 */
export interface TutorialBriefStepsInner {
    /**
     * 
     * @type {number}
     * @memberof TutorialBriefStepsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TutorialBriefStepsInner
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof TutorialBriefStepsInner
     */
    'index': number;
}
/**
 * 
 * @export
 * @interface TutorialMetadata
 */
export interface TutorialMetadata {
    /**
     * 
     * @type {number}
     * @memberof TutorialMetadata
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TutorialMetadata
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TutorialMetadata
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TutorialMetadata
     */
    'target_site': string;
}
/**
 * 
 * @export
 * @interface StepsInner
 */
export interface StepsInner {
    /**
     * 
     * @type {number}
     * @memberof StepsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StepsInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof StepsInner
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof StepsInner
     */
    'index': number;
    /**
     * 
     * @type {Array<StepActionsInner>}
     * @memberof StepsInner
     */
    'actions'?: Array<StepActionsInner>;
    /**
     * 
     * @type {number}
     * @memberof StepsInner
     */
    'tutorial_id': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'url'?: string;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * The groups this user belongs to. A user will get all permissions granted to each of their groups.
     * @type {Array<string>}
     * @memberof User
     */
    'groups'?: Array<string>;
}

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAction: async (action?: Action, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/actions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(action, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyAction', 'id', id)
            const localVarPath = `/actions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActions: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/actions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAction: async (id: string, action?: Action, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateAction', 'id', id)
            const localVarPath = `/actions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(action, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveAction', 'id', id)
            const localVarPath = `/actions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAction: async (id: string, action?: Action, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAction', 'id', id)
            const localVarPath = `/actions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(action, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAction(action?: Action, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Action>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAction(action, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyAction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActions(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListActions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActions(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateAction(id: string, action?: Action, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Action>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateAction(id, action, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Action>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAction(id: string, action?: Action, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Action>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAction(id, action, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActionsApiFp(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAction(action?: Action, options?: any): AxiosPromise<Action> {
            return localVarFp.createAction(action, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAction(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActions(page?: number, options?: any): AxiosPromise<ListActions200Response> {
            return localVarFp.listActions(page, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAction(id: string, action?: Action, options?: any): AxiosPromise<Action> {
            return localVarFp.partialUpdateAction(id, action, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAction(id: string, options?: any): AxiosPromise<Action> {
            return localVarFp.retrieveAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this action.
         * @param {Action} [action] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAction(id: string, action?: Action, options?: any): AxiosPromise<Action> {
            return localVarFp.updateAction(id, action, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI {
    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {Action} [action] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public createAction(action?: Action, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).createAction(action, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public destroyAction(id: string, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).destroyAction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public listActions(page?: number, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).listActions(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this action.
     * @param {Action} [action] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public partialUpdateAction(id: string, action?: Action, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).partialUpdateAction(id, action, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public retrieveAction(id: string, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).retrieveAction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this action.
     * @param {Action} [action] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public updateAction(id: string, action?: Action, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).updateAction(id, action, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (group?: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyGroup', 'id', id)
            const localVarPath = `/groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGroup: async (id: string, group?: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateGroup', 'id', id)
            const localVarPath = `/groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveGroup', 'id', id)
            const localVarPath = `/groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: string, group?: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            const localVarPath = `/groups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(group?: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateGroup(id: string, group?: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateGroup(id, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, group?: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(id, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(group?: Group, options?: any): AxiosPromise<Group> {
            return localVarFp.createGroup(group, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyGroup(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(page?: number, options?: any): AxiosPromise<ListGroups200Response> {
            return localVarFp.listGroups(page, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGroup(id: string, group?: Group, options?: any): AxiosPromise<Group> {
            return localVarFp.partialUpdateGroup(id, group, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroup(id: string, options?: any): AxiosPromise<Group> {
            return localVarFp.retrieveGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this group.
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(id: string, group?: Group, options?: any): AxiosPromise<Group> {
            return localVarFp.updateGroup(id, group, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroup(group?: Group, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public destroyGroup(id: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).destroyGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public listGroups(page?: number, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).listGroups(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this group.
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public partialUpdateGroup(id: string, group?: Group, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).partialUpdateGroup(id, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public retrieveGroup(id: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).retrieveGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this group.
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(id: string, group?: Group, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(id, group, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StepsApi - axios parameter creator
 * @export
 */
export const StepsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStep: async (step?: Step, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/steps/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(step, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyStep: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyStep', 'id', id)
            const localVarPath = `/steps/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSteps: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/steps/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateStep: async (id: string, step?: Step, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateStep', 'id', id)
            const localVarPath = `/steps/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(step, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveStep: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveStep', 'id', id)
            const localVarPath = `/steps/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStep: async (id: string, step?: Step, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStep', 'id', id)
            const localVarPath = `/steps/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(step, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StepsApi - functional programming interface
 * @export
 */
export const StepsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StepsApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStep(step?: Step, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStep(step, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyStep(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyStep(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSteps(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSteps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSteps(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateStep(id: string, step?: Step, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateStep(id, step, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveStep(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveStep(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStep(id: string, step?: Step, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Step>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStep(id, step, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StepsApi - factory interface
 * @export
 */
export const StepsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StepsApiFp(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStep(step?: Step, options?: any): AxiosPromise<Step> {
            return localVarFp.createStep(step, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyStep(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyStep(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSteps(page?: number, options?: any): AxiosPromise<ListSteps200Response> {
            return localVarFp.listSteps(page, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateStep(id: string, step?: Step, options?: any): AxiosPromise<Step> {
            return localVarFp.partialUpdateStep(id, step, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveStep(id: string, options?: any): AxiosPromise<Step> {
            return localVarFp.retrieveStep(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this step.
         * @param {Step} [step] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStep(id: string, step?: Step, options?: any): AxiosPromise<Step> {
            return localVarFp.updateStep(id, step, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StepsApi - object-oriented interface
 * @export
 * @class StepsApi
 * @extends {BaseAPI}
 */
export class StepsApi extends BaseAPI {
    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {Step} [step] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public createStep(step?: Step, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).createStep(step, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this step.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public destroyStep(id: string, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).destroyStep(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public listSteps(page?: number, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).listSteps(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this step.
     * @param {Step} [step] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public partialUpdateStep(id: string, step?: Step, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).partialUpdateStep(id, step, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this step.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public retrieveStep(id: string, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).retrieveStep(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this step.
     * @param {Step} [step] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StepsApi
     */
    public updateStep(id: string, step?: Step, options?: AxiosRequestConfig) {
        return StepsApiFp(this.configuration).updateStep(id, step, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TutorialsApi - axios parameter creator
 * @export
 */
export const TutorialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTutorial: async (tutorial?: Tutorial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tutorials/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tutorial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyTutorial: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyTutorial', 'id', id)
            const localVarPath = `/tutorials/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTutorials: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tutorials/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTutorial: async (id: string, tutorial?: Tutorial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateTutorial', 'id', id)
            const localVarPath = `/tutorials/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tutorial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTutorial: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveTutorial', 'id', id)
            const localVarPath = `/tutorials/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTutorial: async (id: string, tutorial?: Tutorial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTutorial', 'id', id)
            const localVarPath = `/tutorials/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tutorial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TutorialsApi - functional programming interface
 * @export
 */
export const TutorialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TutorialsApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTutorial(tutorial?: Tutorial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tutorial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTutorial(tutorial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyTutorial(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyTutorial(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTutorials(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTutorials200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTutorials(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateTutorial(id: string, tutorial?: Tutorial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tutorial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateTutorial(id, tutorial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTutorial(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutorialBrief>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTutorial(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTutorial(id: string, tutorial?: Tutorial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tutorial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTutorial(id, tutorial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TutorialsApi - factory interface
 * @export
 */
export const TutorialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TutorialsApiFp(configuration)
    return {
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTutorial(tutorial?: Tutorial, options?: any): AxiosPromise<Tutorial> {
            return localVarFp.createTutorial(tutorial, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyTutorial(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyTutorial(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTutorials(page?: number, options?: any): AxiosPromise<ListTutorials200Response> {
            return localVarFp.listTutorials(page, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateTutorial(id: string, tutorial?: Tutorial, options?: any): AxiosPromise<Tutorial> {
            return localVarFp.partialUpdateTutorial(id, tutorial, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTutorial(id: string, options?: any): AxiosPromise<TutorialBrief> {
            return localVarFp.retrieveTutorial(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows groups to be viewed or edited.
         * @param {string} id A unique integer value identifying this tutorial.
         * @param {Tutorial} [tutorial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTutorial(id: string, tutorial?: Tutorial, options?: any): AxiosPromise<Tutorial> {
            return localVarFp.updateTutorial(id, tutorial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TutorialsApi - object-oriented interface
 * @export
 * @class TutorialsApi
 * @extends {BaseAPI}
 */
export class TutorialsApi extends BaseAPI {
    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {Tutorial} [tutorial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public createTutorial(tutorial?: Tutorial, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).createTutorial(tutorial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this tutorial.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public destroyTutorial(id: string, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).destroyTutorial(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public listTutorials(page?: number, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).listTutorials(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this tutorial.
     * @param {Tutorial} [tutorial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public partialUpdateTutorial(id: string, tutorial?: Tutorial, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).partialUpdateTutorial(id, tutorial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this tutorial.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public retrieveTutorial(id: string, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).retrieveTutorial(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     * @param {string} id A unique integer value identifying this tutorial.
     * @param {Tutorial} [tutorial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public updateTutorial(id: string, tutorial?: Tutorial, options?: AxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).updateTutorial(id, tutorial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyUser', 'id', id)
            const localVarPath = `/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUser: async (id: string, user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateUser', 'id', id)
            const localVarPath = `/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveUser', 'id', id)
            const localVarPath = `/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            const localVarPath = `/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateUser(id: string, user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateUser(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: string, user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(user?: User, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyUser(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, options?: any): AxiosPromise<ListUsers200Response> {
            return localVarFp.listUsers(page, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUser(id: string, user?: User, options?: any): AxiosPromise<User> {
            return localVarFp.partialUpdateUser(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUser(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.retrieveUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint that allows users to be viewed or edited.
         * @param {string} id A unique integer value identifying this user.
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, user?: User, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(id, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(user?: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public destroyUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).destroyUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(page?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A unique integer value identifying this user.
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public partialUpdateUser(id: string, user?: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).partialUpdateUser(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public retrieveUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).retrieveUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     * @param {string} id A unique integer value identifying this user.
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(id: string, user?: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(id, user, options).then((request) => request(this.axios, this.basePath));
    }
}


